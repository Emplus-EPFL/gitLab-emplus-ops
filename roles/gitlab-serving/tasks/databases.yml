- include_vars: "{{ item }}"
  tags: always
  with_items:
    - database-vars.yml
    # From the top-level vars/ directory:
    - paths.yml
    - database-names.yml

- name: Directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ redis_config_dir }}"
    - "{{ postgresql_config_dir }}"
    - "{{ postgresql_scripts_dir }}"
    - "{{ postgresql_last_backup_path | dirname }}"

- name: Doctored passwd file for PostgreSQL
  # Make sure that users “gitlab” and “gitlab-psql” exist; give them
  # the same UID (999) as the “postgres” user. TODO: perhaps we should
  # figure the 999 part from the image instead of hard-coding it.
  shell:
    creates: "{{ postgresql_config_dir }}/passwd"
    cmd: |
      (
        set -e -x
        docker run --rm "{{ postgresql_docker_image }}" cat /etc/passwd
        cat <<MOAR_PASSWD
      gitlab:x:999:999::/home/postgres:/bin/sh
      gitlab-psql:x:999:999::/home/postgres:/bin/sh
      MOAR_PASSWD
      ) > "{{ postgresql_config_dir }}/passwd"

- name: "{{ postgresql_last_backup_path }} (must be a file)"
  run_once: true
  ansible.builtin.file:
    path: "{{ postgresql_last_backup_path }}"
    state: touch

- name: 'PostgreSQL initialization scripts'
  copy:
    dest: "{{ postgresql_scripts_dir }}/{{ item.filename }}"
    content: "{{ item.content }}"
    mode: >-
      {{
      "0644" if item.filename.endswith(".sql")
      else "0755"
      }}
  with_items: >-
    {{
    common_scripts +
    (staging_only_scripts if environment_name == "staging" else [])
    }}
  vars:
    common_scripts:
      - filename: setup-authentication.sh
        # Permit local (UNIX domain socket) authentication without a
        # password, and SSL with password over TCP for the gitlab
        # user. Forbid everything else.
        content: |
          #!/bin/bash
          cat > /var/lib/postgresql/data/pg_hba.conf << HBACONF
          local   all all         trust
          hostssl all gitlab all     md5
          HBACONF
      - filename: setup-extra-socket-dir.sh
        # Listen to *another* UNIX domain socket. This will only
        # happen after PostgreSQL is done initializing and restarts,
        # thereby guaranteeing that clients cannot witness an
        # incompletely-initialized DB.
        content: |
          #!/bin/bash
          mkdir -p /run/gitlab-postgresql
          sed -ri "s|^#unix_socket_directories.*|unix_socket_directories = '/var/run/postgresql,/run/gitlab-postgresql'|g" {{ pg_conf_path }}
      - filename: gitlab-role.sql
        content: |
          CREATE USER gitlab;
          CREATE DATABASE {{ postgresql_database_name }};
          GRANT ALL PRIVILEGES ON DATABASE {{ postgresql_database_name }} TO gitlab;
    staging_only_scripts:
      - filename: log-queries.sh
        # Turn on query logging
        # Found on https://github.com/Roconda/docker-postgres-logging/blob/master/Dockerfile
        content: |
          #!/bin/bash
          sed -ri "s/^#log_statement.*/log_statement = 'all'/g" {{ pg_conf_path }}
    pg_conf_path: "/var/lib/postgresql/data/postgresql.conf"
  tags:
    - postgres
    - postgresql

- name: "{{ postgresql_certs_dir }}"
  file:
    path: "{{ postgresql_certs_dir }}"
    state: directory
  tags: databases.certs

- name: "RSA key for PostgreSQL"
  openssl_privatekey:
    path: "{{ postgresql_certs_dir }}/key.pem"
    size: 2048
    mode: "0640"    # Postgres is cool that way
    group: "101"    # ssl-cert
  tags: databases.certs

- name: "CSR for PostgreSQL"
  openssl_csr:
    path: "{{ postgresql_certs_dir }}/cert.csr"
    privatekey_path: "{{ postgresql_certs_dir }}/key.pem"
    common_name: "gitlab.epfl.ch"
  tags: databases.certs

- name: "RSA certificate for PostgreSQL"
  openssl_certificate:
    path: "{{ postgresql_certs_dir }}/cert.pem"
    privatekey_path: "{{ postgresql_certs_dir }}/key.pem"
    csr_path: "{{ postgresql_certs_dir }}/cert.csr"
    provider: selfsigned
    valid_in: +36500d
  tags: databases.certs

- name: Should we purge the staging PostgreSQL?
  # We kick the staging database (so that it reloads from a production
  # backup) whenever we build a new image:
  tags: always
  set_fact:
    _postgresql_should_purge_staging: >-
      {{ (environment_name == "staging")
         and
         (  ( (_serving_image is defined)
              and (_serving_image is changed) )
            or
            ( "postgres.reload.staging" in ansible_run_tags )
            or
            ( "postgresql.reload.staging" in ansible_run_tags )
         )
      }}

- name: 'PostgreSQL database'
  docker_container:
    name: "postgresql_{{ environment_name }}"
    image: "{{ postgresql_docker_image }}"
    detach: yes
    restart_policy: unless-stopped
    recreate: "{{ _postgresql_should_purge_staging }}"
    log_driver: json-file
    log_options:
      max-size: 50m
      max-file: "3"
    container_default_behavior: no_defaults
    volumes: "{{ volumes[environment_name] }}"
    network_mode: "{{ docker_network_name }}"
    command:
      - postgres
      - "-c"
      - ssl=on
      - "-c"
      - ssl_cert_file=/etc/ssl/certs/cert.pem
      - "-c"
      - ssl_key_file=/etc/ssl/certs/key.pem
    env:
      # pg_hba.conf guarantees that knowing this password cannot possibly make a
      # difference (see above):
      POSTGRES_PASSWORD: unused_but_the_container_insists_on_having_one_so_there
  vars:
    volumes:
      staging: '{{ common_volumes + [staging_db_restore_volume] }}'
      prod: '{{ common_volumes + [ prod_storage_volume ] }}'
    common_volumes:
      # UNIX-domain socket to share with other containers (i.e.
      # gitlab). See above for why we aren't just using
      # /run/postgresql (TL;DR: initialization ordering guarantee)
      - "/srv/gitlab/run/postgres-socket-{{ environment_name }}:/run/gitlab-postgresql/"
      # Doctored passwd file, see above
      - "{{ postgresql_config_dir }}/passwd:/etc/passwd:ro"
      - "{{ postgresql_certs_dir }}:/etc/ssl/certs"
      - "{{ postgresql_scripts_dir }}:/docker-entrypoint-initdb.d:rw"
    prod_storage_volume: "{{ postgresql_prod_cluster_path }}:/var/lib/postgresql/data"
    # The staging database is *not* persistent; instead, we want it to reload
    # from a production backup every time it starts up.
    staging_db_restore_volume: "/srv/gitlab/backup/postgresql_dump.sql:/docker-entrypoint-initdb.d/00-restore.sql:ro"
  tags:
    - postgres
    - postgresql
    - postgres.reload.staging
    - postgresql.reload.staging

- name: "Wait until staging PostgreSQL has reloaded from backup"
  when: _postgresql_should_purge_staging
  changed_when: false
  tags:
    - postgres
    - postgresql
    - postgres.reload.staging
    - postgresql.reload.staging
  shell:
    cmd: >-
      docker logs postgresql_staging 2>&1 |
      grep 'PostgreSQL init process complete; ready for start up.'
  register: _database_staging_ready
  until: >
    ansible_check_mode or _database_staging_ready is success
  retries: 20
  delay: 30

- name: "{{ redis_config_dir }}/redis.conf"
  copy:
    dest: "{{ redis_config_dir }}/redis.conf"
    content: >-
      {{ lookup("template", "redis.conf.j2") }}

- name: "Redis socket directory (/srv/gitlab/run/redis-socket-{{ environment_name }})"
  file:
    path: "/srv/gitlab/run/redis-socket-{{ environment_name }}"
    state: directory
    mode: "01777"

- name: "PostgreSQL exporter"
  when: inventory_hostname == "gitlabprod"
  docker_container:
    name: postgres-exporter-prod
    image: "{{ postgresql_monitoring_exporter_image }}"
    restart_policy: unless-stopped
    log_driver: json-file
    log_options:
      max-size: 10m
      max-file: "3"
    network_mode: "{{ docker_network_name }}"
    env:
      DATA_SOURCE_NAME: "user=postgres host=/run/postgresql/ sslmode=disable"
    container_default_behavior: no_defaults
    volumes:
      - "/srv/gitlab/run/postgres-socket-{{ environment_name }}:/run/postgresql/"
  tags:
    - postgres.monitoring
    - postgresql.monitoring

- name: 'Redis'
  docker_container:
    restart_policy: unless-stopped
    name: "redis_{{ environment_name }}"
    image: "{{ redis_docker_image }}"
    log_driver: json-file
    log_options:
      max-size: 50m
      max-file: "3"
    container_default_behavior: no_defaults
    volumes:
      - "{{ redis_config_dir }}/redis.conf:/usr/local/etc/redis/redis.conf:ro"
      - "/srv/gitlab/run/redis-socket-{{ environment_name }}:/run/redis"
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf
